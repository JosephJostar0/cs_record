// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    /* 
        if A_instruction:
            ARegister = instruction
            addressM = instruction
        else:
            if d0 is 1:     # d0 = instruction[5]
                ARegister = AluOutput
            addressM = ARegister
            
            AluInput0 = DRegister
            AluInput1 = ARegister if a is 1 else Min
            AluOutput, zr, ng = ALU(AluInput0, AluInput1, c0, c1, c2, c3, c4, c5, c6)   # c0 = instruction[11]...
            
            outM = AluOutput
            writeM = d2     # d2 = instruction[3]

            if d1 is 1:     # d1 = instruction[4]
                DRigister = AluOutput
            
            PC += 1
            if Condition() is true or (no conditional goto):
                PC = ARegister
            if reset is 1:
                PC = 0
            pc = PC
        
        def Condition():
            if j1 is 1 and outM < 0:
                return true
            elif j2 is 1 and outM is 0:
                return true
            elif j3 is 1 and outM > 0:
                return true
            return false
    */

    // ARegister & addressM
    Not(in=instruction[15], out=isAIns);
    Or(a=isAIns, b=instruction[5], out=isArSave);
    Mux16(a=aluOut, b=instruction, sel=isAIns, out=arIn);
    ARegister(in=arIn, load=isArSave, out=arOut, out[0..14]=addressM);

    // ALU & outM
    Mux16(a=arOut, b=inM, sel=instruction[12], out=aluIn1);
    ALU(x=drOut, y=aluIn1, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=aluZr, ng=aluNg);

    // writeM
    And(a=instruction[15], b=instruction[3], out=writeM);

    // Dregister
    And(a=instruction[15], b=instruction[4], out=isDrSave);
    DRegister(in=aluOut, load=isDrSave, out=drOut);

    // PC
    And(a=instruction[2], b=aluNg, out=isJ1);
    And(a=instruction[1], b=aluZr, out=isJ2);
    Or(a=aluNg, b=aluZr, out=notPosi);
    Not(in=notPosi, out=isPosi);
    And(a=instruction[0], b=isPosi, out=isJ3);
    Or(a=isJ1, b=isJ2, out=temp);
    Or(a=temp, b=isJ3, out=isJ);
    And(a=instruction[15], b=isJ, out=isLoad);
    PC(in=arOut, load=isLoad, inc=true, reset=reset, out[0..14]=pc);
}