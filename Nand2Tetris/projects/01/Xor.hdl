// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/01/Xor.hdl

/**
 * Exclusive-or gate:
 * out = not (a == b)
 */

CHIP Xor {
    IN a, b;
    OUT out;

    PARTS:
    // Put your code here:

    /*
    Xor(a, b) =
    Or(
        And(a, Not(b)), And(Not(a), b)
    ) =
    Not(And(
        Not(And(a, Not(b))),
        Not(And(Not(a), b))
    )) =
    Nand(
        Nand(a, Not(b)),
        Nand(Not(a), b)
    )
    
    
    though the one above is good enough, but the best one is:
    (We may read it from the bottom-up)

    Xor(a, b) =
    Or(
        And(a, Not(b)), And(Not(a), b)
    ) =
    Or4Way(
        And(a, Not(a)), And(a, Not(b)),
        And(Not(a), b), And(b, Not(b)),
    ) =
    Or(
        And(a, Or(Not(a), Not(b))),
        And(b, Or(Not(a), Not(b)))
    ) =
    Or(
        And(a, Not(And(a, b))),
        And(b, Not(And(a, b)))
    ) =
    Not(And(
        Not(And(a, Not(And(a, b)))),
        Not(And(b, Not(And(a, b))))
    )) =
    Nand(
        Nand(a, Nand(a,b)),
        Nand(b, Nand(a,b))
    )
    
    As you see, we can use only 4 Nand gates rather than 5.
    */

    Not(in=a, out=NOTa);
    Not(in=b, out=NOTb);
    Nand(a=a, b=NOTb, out=temp0);
    Nand(a=NOTa, b=b, out=temp1);
    Nand(a=temp0, b=temp1, out=out);
}