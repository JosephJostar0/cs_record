// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384;
        return;
    }
    
    function boolean bit(int x, int i) {
        return (~((x & twoToThe[i]) = 0));
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return (-x);
        }
        return x;
    }

    function int getMask(int i) {
        return twoToThe[i];
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, shiftedX, i;
        let shiftedX = x;
        while (i < 16) {
            if(Math.bit(y, i)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var boolean signX, signY;
        var int q, absX, absY;
        let signX = Math.bit(x, 15);
        let signY = Math.bit(y, 15);
        let absX = Math.abs(x);
        let absY = Math.abs(y);
        if ((absY > absX) | (y = -32767)) {
            return 0;
        }
        
        if ((absY * 2) < 0) {
            let q = 0;
        }
        else {
            let q = Math.divide(absX, (absY * 2));
        }
        
        if ((absX - (2 * q * absY)) < absY) {
            if (signX = signY) {
                return (2 * q);
            }
            return -2 * q;
        }
        if (signX = signY) {
            return ((2 * q) + 1);
        }
        return -((2 * q) + 1);
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp, current;
        let j = 15;
        while (~((j < 0) | (Math.bit(x, j)))) {
            let j = j - 1;
        }
        let j = (j + 1) / 2;
        while (~(j < 0)) {
            let temp = y + twoToThe[j];
            let current = temp * temp;
            if ((current > 0) & ((current < x) | (current = x))) {
                let y = temp;
            }
            let j = j - 1;
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }
        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }
        return b;
    }
}
